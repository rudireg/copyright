[__title__]
eweweqweqw
[__description__]

[__metatitle__]
14. обзор youloveit.ru :
[__metakeywords__]
<a href="http://ur-professional.ru/" title="юридическая консультация">юридическая консультация</a>,
<a href="http://ur-professional.ru/" title="бесплатная консультация юриста санкт-петербург">бесплатная консультация юриста санкт-петербург</a>
[__metadescription__]
eweweqweqw
[__slug__]
eweweqweqw
[__snippet__]
информацию, которую мы вынесли в отдельные переменные выше.
mysql_select_db – после успешного подключения нужно выбрать базу данных...
[__content__]
<p>информацию, которую мы вынесли в отдельные переменные выше.</p><p>mysql_select_db – после успешного подключения нужно выбрать базу данных. Эта функция как раз это и производит.</p><p>Если же хотя бы одна из функций не смогла отработать по какой-либо причине, то работа нашего скрипты прекращается и выводится ошибка. За это ответственна функция die. А за вывод самой ошибки отвечает функция mysql_error().</p><p>Отлично, файл с настройками создан (вы же не забыли изменить значения переменных на свои?) и теперь подошла очередь создать главный файл – index.php.  Самой первой строчкой в нём должно быть подключение нашего конфигурационного файла.</p><p><?php include "base.php"; ?></p><p>Далее нам нужно создать базовую разметку HTML. У нас будет один главный контейнер, в который сложим заголовок и все поля для ввода данных. Ах ну да, ещё и кнопку. Пока все элементы будут некрасивыми, но это ОК. Позже преукрасим их с помощью CSS.</p><p><!DOCTYPE HTML></p><p><html></p><p><head></p><p>    <meta charset="utf-8"></p><p>    <title>Регистрация пользователей на PHP</title></p><p>    <link rel="stylesheet" href="style.css"></p><p></head></p><p><body></p><p>    <div id="main"></p><p>    </div></p><p></body></p><p></html></p><p>Прежде чем выводить содержимое страницы, у нас есть пара вопросов, на которые нужно ответить:</p><p>Пользователь уже зарегистрирован?</p><p>ДА – показываем ему страницу с опциями для зарегистрированных пользователей</p><p>НЕТ – переходим к следующему вопросу</p><p>Пользователь зарегистрировался и отправил свои данные?</p><p>ДА – Проверяем данные, регистрируем пользователя и производим авторизацию</p><p>НЕТ – переходим к следующему вопросу</p><p>Если на оба вопроса ответ НЕТ, то выводим форму для авторизации.</p><p>Теперь давайте реализуем эти условия на языке PHP. Внутри нашего главного блока в HTML, напишем несколько конструкций If</p><p><?php  </p><p>if(!empty($_SESSION['LoggedIn']) && !empty($_SESSION['Username']))  </p><p>    // даём доступ пользователю к главной странице</p><p>elseif(!empty($_POST['username']) && !empty($_POST['password']))  </p><p>    // позволим пользователю войти на сайт </p><p>else  </p><p>    // выводим форму для авторизации  <a href="" title="1" target="_blanc"> 1</a></p><p>Когда пользователь входит на сайт, мы храним информацию о нём в его сессии. Чтобы получить к ней доступ, нужно обратиться к глобальному массиву PHP - $_SESSION. Также мы будем использовать функцию empty() для проверки, пусто ли в  переменной или нет. Оператор ! перед функцией говорит об её отрицании, т.е:</p><p>Если переменная $_SESSION['LoggedIn'] не пустая и переменная $_SESSION['Username'] тоже не пустая, то выполнить часть кода ниже.</p><p>Следующие строки кода имеют схожую механику, но мы используем уже глобальный массив $_POST. В нём хранится любая информация, которая была отправлена с формы при входе на сайт или регистрации. Эту форму мы создадим чуть позже.</p><p>Последняя строка выполниться, только когда все верхние проверки не</p><p>Официальный источник: www.http://art.botinok.in/</p>